{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IMPORTING DEPENDENCIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "IMPORTING THE DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_excel(\"tax data.xlsx\" )   #dtype = {\"ANNUAL TAX\": int, \"NUMBER OF MONTHS\": int}  #skiprows = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DATA PRE-PROCESSING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NATIONALITY            0\n",
       "DESIGNATION            0\n",
       "SECTOR                 0\n",
       "GROSS INCOME           0\n",
       "ANNUAL TAX             0\n",
       "NUMBER OF MONTHS    1553\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NATIONALITY          object\n",
       "DESIGNATION          object\n",
       "SECTOR               object\n",
       "GROSS INCOME        float64\n",
       "ANNUAL TAX          float64\n",
       "NUMBER OF MONTHS    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data[\"NUMBER OF MONTHS\"] = pd.to_numeric(data[\"NUMBER OF MONTHS\"], errors = \"coerce\")\n",
    "#data[\"NUMBER OF MONTHS\"].fillna(data[\"NUMBER OF MONTHS\"].mean(), inplace = True)\n",
    "#data[\"DESIGNATION\"].fillna(\"Staff\", inplace = True)\n",
    "#DATA = data.dropna(axis = 0, how = \"any\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EXPLORATORY ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NATIONALITY</th>\n",
       "      <th>DESIGNATION</th>\n",
       "      <th>SECTOR</th>\n",
       "      <th>GROSS INCOME</th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>NUMBER OF MONTHS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>ADMIN OFFICER</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>274000.0</td>\n",
       "      <td>2740.00</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>ADMIN OFFICER</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>69600.0</td>\n",
       "      <td>1698.66</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>SECURITY</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>205500.0</td>\n",
       "      <td>2055.00</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>SECURITY</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>250000.0</td>\n",
       "      <td>2500.00</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>PHARMACIST</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>1235000.0</td>\n",
       "      <td>67920.00</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  NATIONALITY    DESIGNATION          SECTOR  GROSS INCOME  ANNUAL TAX  \\\n",
       "0    NIGERIAN  ADMIN OFFICER  PHARMACUETICAL      274000.0     2740.00   \n",
       "1    NIGERIAN  ADMIN OFFICER  PHARMACUETICAL       69600.0     1698.66   \n",
       "2    NIGERIAN       SECURITY  PHARMACUETICAL      205500.0     2055.00   \n",
       "3    NIGERIAN       SECURITY  PHARMACUETICAL      250000.0     2500.00   \n",
       "4    NIGERIAN     PHARMACIST  PHARMACUETICAL     1235000.0    67920.00   \n",
       "\n",
       "   NUMBER OF MONTHS  \n",
       "0              12.0  \n",
       "1               2.0  \n",
       "2              10.0  \n",
       "3              12.0  \n",
       "4              12.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(27263, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 27263 entries, 0 to 27262\n",
      "Data columns (total 6 columns):\n",
      "NATIONALITY         27263 non-null object\n",
      "DESIGNATION         27263 non-null object\n",
      "SECTOR              27263 non-null object\n",
      "GROSS INCOME        27263 non-null float64\n",
      "ANNUAL TAX          27263 non-null float64\n",
      "NUMBER OF MONTHS    25710 non-null float64\n",
      "dtypes: float64(3), object(3)\n",
      "memory usage: 958.5+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GROSS INCOME</th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>NUMBER OF MONTHS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.726300e+04</td>\n",
       "      <td>2.726300e+04</td>\n",
       "      <td>25710.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.942466e+06</td>\n",
       "      <td>1.390330e+06</td>\n",
       "      <td>10.369646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.901260e+07</td>\n",
       "      <td>3.413993e+06</td>\n",
       "      <td>3.256604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-9.531389e+04</td>\n",
       "      <td>-1.763307e+04</td>\n",
       "      <td>-0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.559000e+06</td>\n",
       "      <td>1.340631e+05</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.107000e+06</td>\n",
       "      <td>5.342120e+05</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.581773e+06</td>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.551362e+08</td>\n",
       "      <td>1.811667e+08</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       GROSS INCOME    ANNUAL TAX  NUMBER OF MONTHS\n",
       "count  2.726300e+04  2.726300e+04      25710.000000\n",
       "mean   8.942466e+06  1.390330e+06         10.369646\n",
       "std    1.901260e+07  3.413993e+06          3.256604\n",
       "min   -9.531389e+04 -1.763307e+04         -0.333333\n",
       "25%    1.559000e+06  1.340631e+05         12.000000\n",
       "50%    4.107000e+06  5.342120e+05         12.000000\n",
       "75%    8.581773e+06  1.284772e+06         12.000000\n",
       "max    9.551362e+08  1.811667e+08         15.000000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BANKING           15546\n",
       "MANUFACTURING      4629\n",
       "TELECOMS           3054\n",
       "PHARMACUETICAL     2206\n",
       "OIL AND GAS        1828\n",
       "Name: SECTOR, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"SECTOR\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#left = data.groupby(\"SECTOR\")\n",
    "#\n",
    "#n = left.sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A LITTLE BIT OF DATA ENGINEERING\n",
    "\n",
    "To create a new column to categorize tax payers based on their income."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['INCOME CATEGORY'] = pd.qcut(data['GROSS INCOME'],7,labels=['LEVEL 1','LEVEL 2', \"LEVEL 3\",'LEVEL 4', \"LEVEL 5\", \"LEVEL 6\", \"LEVEL 7\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NATIONALITY</th>\n",
       "      <th>DESIGNATION</th>\n",
       "      <th>SECTOR</th>\n",
       "      <th>GROSS INCOME</th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>NUMBER OF MONTHS</th>\n",
       "      <th>INCOME CATEGORY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>ADMIN OFFICER</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>274000.0</td>\n",
       "      <td>2740.00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>ADMIN OFFICER</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>69600.0</td>\n",
       "      <td>1698.66</td>\n",
       "      <td>2.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>SECURITY</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>205500.0</td>\n",
       "      <td>2055.00</td>\n",
       "      <td>10.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>SECURITY</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>250000.0</td>\n",
       "      <td>2500.00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>PHARMACIST</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>1235000.0</td>\n",
       "      <td>67920.00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>LEVEL 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>OPERATOR</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>84000.0</td>\n",
       "      <td>840.00</td>\n",
       "      <td>3.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>PHARMACIST</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>1353.33</td>\n",
       "      <td>1.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>CHEMIST</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>320000.0</td>\n",
       "      <td>5087.98</td>\n",
       "      <td>10.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>DRIVER</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>380000.0</td>\n",
       "      <td>5151.96</td>\n",
       "      <td>12.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NIGERIAN</td>\n",
       "      <td>OPERATOR</td>\n",
       "      <td>PHARMACUETICAL</td>\n",
       "      <td>385000.0</td>\n",
       "      <td>5403.96</td>\n",
       "      <td>12.0</td>\n",
       "      <td>LEVEL 1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  NATIONALITY    DESIGNATION          SECTOR  GROSS INCOME  ANNUAL TAX  \\\n",
       "0    NIGERIAN  ADMIN OFFICER  PHARMACUETICAL      274000.0     2740.00   \n",
       "1    NIGERIAN  ADMIN OFFICER  PHARMACUETICAL       69600.0     1698.66   \n",
       "2    NIGERIAN       SECURITY  PHARMACUETICAL      205500.0     2055.00   \n",
       "3    NIGERIAN       SECURITY  PHARMACUETICAL      250000.0     2500.00   \n",
       "4    NIGERIAN     PHARMACIST  PHARMACUETICAL     1235000.0    67920.00   \n",
       "5    NIGERIAN       OPERATOR  PHARMACUETICAL       84000.0      840.00   \n",
       "6    NIGERIAN     PHARMACIST  PHARMACUETICAL       75000.0     1353.33   \n",
       "7    NIGERIAN        CHEMIST  PHARMACUETICAL      320000.0     5087.98   \n",
       "8    NIGERIAN         DRIVER  PHARMACUETICAL      380000.0     5151.96   \n",
       "9    NIGERIAN       OPERATOR  PHARMACUETICAL      385000.0     5403.96   \n",
       "\n",
       "   NUMBER OF MONTHS INCOME CATEGORY  \n",
       "0              12.0         LEVEL 1  \n",
       "1               2.0         LEVEL 1  \n",
       "2              10.0         LEVEL 1  \n",
       "3              12.0         LEVEL 1  \n",
       "4              12.0         LEVEL 2  \n",
       "5               3.0         LEVEL 1  \n",
       "6               1.0         LEVEL 1  \n",
       "7              10.0         LEVEL 1  \n",
       "8              12.0         LEVEL 1  \n",
       "9              12.0         LEVEL 1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NIGERIAN      27137\n",
       "FOREIGNER       122\n",
       " NIGERIAN         4\n",
       "Name: NATIONALITY, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"NATIONALITY\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DATA VISUALIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9022c30>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#SHOWING THE STAFF STRENGTH OF EACH SECTOR\n",
    "\n",
    "plt.title(\"Showing the staff strength of the 5 sectors\")\n",
    "sns.set(style=\"darkgrid\")\n",
    "sns.countplot(x = data[\"SECTOR\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x9505510>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#SHOWING HOW MUCH TAX EACH SECTOR GENERATES\n",
    "\n",
    "sns.barplot(x= 'SECTOR', y= 'ANNUAL TAX', data = data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.title(\"TAX GENERATED BY EACH SECTOR\")\n",
    "#sns.set(style=\"darkgrid\")\n",
    "#sns.countplot(x = data[\"ANNUAL TAX\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.bar(left.index.values, left[\"ANNUAL TAX\"])\n",
    "#plt.ylabel(\"AMOUNT GENERATED\")\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA = data.drop(\"DESIGNATION\", axis = 1)\n",
    "DATA = DATA.drop(\"NUMBER OF MONTHS\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#tax = pd.get_dummies(DATA)\n",
    "#sns.pairplot(DATA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### PROBLEM STATEMENT\n",
    "\n",
    "Predicting the annual tax of gainfully employed citizens of Nigeria using their gross income. To enable the government better plan the country's budget."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting our train, validation and test data\n",
    "\n",
    "X = data[[\"GROSS INCOME\"]]\n",
    "Y = data[[\"ANNUAL TAX\"]]\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 42)\n",
    "X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODEL TRAINING\n",
    "\n",
    "We use the train set to train the model and use the validation set to validate and thereafter test with the test set.\n",
    "\n",
    "1) LINEAR REGRESSION MODEL."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "regressor = LinearRegression()\n",
    "regressor.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9875992143180498"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.score(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-194939.14314032]\n"
     ]
    }
   ],
   "source": [
    "print(regressor.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.17776486]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To check corelation between variables\n",
    "\n",
    "#cor = data.corr()\n",
    "#print(cor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODEL VALIDATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_val_pred = regressor.predict(X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_val[\"ANNUAL TAX VAL_PRED\"] = Y_val_pred\n",
    "Y_val.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODEL TESTING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_test_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>ANNUAL TAX TEST_PRED</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.277321e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>7.367901e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.703677e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>1.812241e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>5.400591e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX  ANNUAL TAX TEST_PRED\n",
       "15245  1.284772e+06          1.277321e+06\n",
       "21122  6.465618e+05          7.367901e+05\n",
       "11605  1.752327e+05          1.703677e+05\n",
       "5804   3.009343e+05          1.812241e+05\n",
       "26718  4.750249e+05          5.400591e+05"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = Y_test\n",
    "result[\"ANNUAL TAX TEST_PRED\"] = Y_test_pred\n",
    "\n",
    "result.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LINEAR VISUALIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#PLOTTING A BAR CHART OF THE TRUE ANNUAL TAX AGAINST THE PREDICTED ANNUAL TAX\n",
    "\n",
    "result[[\"ANNUAL TAX\", \"ANNUAL TAX TEST_PRED\"]].head(10).plot(kind = \"bar\", figsize = (16, 10))\n",
    "plt.grid(which = \"major\", linestyle = \"-\", linewidth = \"0.5\", color = \"green\")\n",
    "plt.grid(which = \"minor\", linestyle = \":\", linewidth = \"0.5\", color = \"black\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#PLOTTING A SCATTER/PLOT OF THE GROSS INCOME AGAINST THE PREDICTED ANNUAL TAX\n",
    "\n",
    "plt.scatter(X_test, result[\"ANNUAL TAX TEST_PRED\"], color = \"purple\")\n",
    "\n",
    "plt.plot(X_test, regressor.predict(X_test), color = \"red\")\n",
    "\n",
    "plt.title(\"Simple Linear Relationship between GROSS INCOME and ANNUAL TAX\")\n",
    "plt.xlabel(\"GROSS INCOME\")\n",
    "plt.ylabel(\"ANNUAL TAX TEST_PRED\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EVALUATION METRICS FOR REGRESSION MODEL \n",
    "\n",
    "#### CHECKING FOR: ERROR, COST FUNCTION, MEAN ABSOLUTE ERROR (MAE), MEAN SQUARED ERROR (MSE) AND ROOT MEAN SQUARED ERROR (RMSE) USING OUR TEST DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         ANNUAL TAX  ANNUAL TAX TEST_PRED          ERROR\n",
      "15245  1.284772e+06          1.277321e+06    7451.159187\n",
      "21122  6.465618e+05          7.367901e+05  -90228.311919\n",
      "11605  1.752327e+05          1.703677e+05    4865.016804\n",
      "5804   3.009343e+05          1.812241e+05  119710.123864\n",
      "26718  4.750249e+05          5.400591e+05  -65034.266158\n",
      "4104   8.766278e+04         -6.845608e+04  156118.865417\n",
      "9192   4.561910e+05          5.030635e+05  -46872.473631\n",
      "21367  1.804398e+06          2.125148e+06 -320750.310093\n",
      "14725  1.423350e+05         -3.183295e+04  174167.947219\n",
      "11879  1.632661e+05          1.577997e+05    5466.395665\n",
      "19010  2.968165e+06          3.053474e+06  -85309.149264\n",
      "\n",
      "THE COST FUNCTION IS =  1083253542.9949877\n",
      "THE MEAN ABSOLUTE ERROR IS =  132443.2746050847\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "n = len(result)\n",
    "\n",
    "result[\"ERROR\"] = result[\"ANNUAL TAX\"].subtract(result[\"ANNUAL TAX TEST_PRED\"])\n",
    "print(result.iloc[ : 11, : ])\n",
    "\n",
    "Cost_Function = abs(result[\"ERROR\"]).sum()\n",
    "Mean_Absolute_Error = Cost_Function / n\n",
    "\n",
    "print(\"\\nTHE COST FUNCTION IS = \", Cost_Function)\n",
    "print(\"THE MEAN ABSOLUTE ERROR IS = \", Mean_Absolute_Error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>ANNUAL TAX TEST_PRED</th>\n",
       "      <th>ERROR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.277321e+06</td>\n",
       "      <td>7451.159187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>7.367901e+05</td>\n",
       "      <td>-90228.311919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.703677e+05</td>\n",
       "      <td>4865.016804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>1.812241e+05</td>\n",
       "      <td>119710.123864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>5.400591e+05</td>\n",
       "      <td>-65034.266158</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX  ANNUAL TAX TEST_PRED          ERROR\n",
       "15245  1.284772e+06          1.277321e+06    7451.159187\n",
       "21122  6.465618e+05          7.367901e+05  -90228.311919\n",
       "11605  1.752327e+05          1.703677e+05    4865.016804\n",
       "5804   3.009343e+05          1.812241e+05  119710.123864\n",
       "26718  4.750249e+05          5.400591e+05  -65034.266158"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Y_test.pop(\"ERROR\")\n",
    "#Y_test.head()\n",
    "result.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3940: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  errors=errors)\n"
     ]
    }
   ],
   "source": [
    "Y_test.drop(\"ANNUAL TAX TEST_PRED\", axis = 1, inplace = True)\n",
    "Y_test.drop(\"ERROR\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MEAN ABSOLUTE ERROR: 132443.2746050847\n",
      "MEAN SQUARED ERROR: 145737153416.075\n",
      "ROOT MEAN SQUARED ERROR: 381755.35807120637\n"
     ]
    }
   ],
   "source": [
    "#USING SKLEARN REGRESSION METRICS\n",
    "\n",
    "from sklearn import metrics\n",
    "\n",
    "print('MEAN ABSOLUTE ERROR:', metrics.mean_absolute_error(Y_test, Y_test_pred))  \n",
    "print('MEAN SQUARED ERROR:', metrics.mean_squared_error(Y_test, Y_test_pred))  \n",
    "print('ROOT MEAN SQUARED ERROR:', np.sqrt(metrics.mean_squared_error(Y_test, Y_test_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### CONCLUSION\n",
    "\n",
    "The disparity between the Y_test(true value) and Y_test_Pred(predicted value) can be ignored."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2) USING RANDOM FOREST MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "                      max_features='auto', max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
       "                      n_jobs=None, oob_score=False, random_state=42, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "\n",
    "rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n",
    "rf.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_rf_pred = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import cross_val_score, GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "check = Y_test\n",
    "check[\"Y_RF_PRED\"] = Y_rf_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>Y_RF_PRED</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.284772e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>6.960452e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.722209e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>2.975266e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>4.996802e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX     Y_RF_PRED\n",
       "15245  1.284772e+06  1.284772e+06\n",
       "21122  6.465618e+05  6.960452e+05\n",
       "11605  1.752327e+05  1.722209e+05\n",
       "5804   3.009343e+05  2.975266e+05\n",
       "26718  4.750249e+05  4.996802e+05"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "check[\"ERROR\"] = check[\"ANNUAL TAX\"].subtract(check[\"Y_RF_PRED\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>Y_RF_PRED</th>\n",
       "      <th>ERROR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>6.960452e+05</td>\n",
       "      <td>-49483.359702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.722209e+05</td>\n",
       "      <td>3011.750424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>2.975266e+05</td>\n",
       "      <td>3407.667358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>4.996802e+05</td>\n",
       "      <td>-24655.307078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX     Y_RF_PRED         ERROR\n",
       "15245  1.284772e+06  1.284772e+06      0.000000\n",
       "21122  6.465618e+05  6.960452e+05 -49483.359702\n",
       "11605  1.752327e+05  1.722209e+05   3011.750424\n",
       "5804   3.009343e+05  2.975266e+05   3407.667358\n",
       "26718  4.750249e+05  4.996802e+05 -24655.307078"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>Y_RF_PRED</th>\n",
       "      <th>ERROR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>6.960452e+05</td>\n",
       "      <td>-49483.359702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.722209e+05</td>\n",
       "      <td>3011.750424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>2.975266e+05</td>\n",
       "      <td>3407.667358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>4.996802e+05</td>\n",
       "      <td>-24655.307078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX     Y_RF_PRED         ERROR\n",
       "15245  1.284772e+06  1.284772e+06      0.000000\n",
       "21122  6.465618e+05  6.960452e+05 -49483.359702\n",
       "11605  1.752327e+05  1.722209e+05   3011.750424\n",
       "5804   3.009343e+05  2.975266e+05   3407.667358\n",
       "26718  4.750249e+05  4.996802e+05 -24655.307078"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TheForbesMaterial\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3940: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  errors=errors)\n"
     ]
    }
   ],
   "source": [
    "Y_test.drop(\"Y_RF_PRED\", axis = 1, inplace = True)\n",
    "Y_test.drop(\"ERROR\", axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MEAN ABSOLUTE ERROR: 105153.4599435009\n",
      "MEAN SQUARED ERROR: 209963835106.9254\n",
      "ROOT MEAN SQUARED ERROR: 458218.10866324935\n"
     ]
    }
   ],
   "source": [
    "print('MEAN ABSOLUTE ERROR:', metrics.mean_absolute_error(Y_test, Y_rf_pred))  \n",
    "print('MEAN SQUARED ERROR:', metrics.mean_squared_error(Y_test, Y_rf_pred))  \n",
    "print('ROOT MEAN SQUARED ERROR:', np.sqrt(metrics.mean_squared_error(Y_test, Y_rf_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'ERROR'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2656\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2657\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2658\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'ERROR'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-59-c4a612065f6c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#CHECKING THE MEAN ABSOLUTE PERCENTAGE BETWEEN ANNUAL TAX AND Y_RF_PRED\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mcheck\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"MAPE\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m100\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mcheck\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"ERROR\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mcheck\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"ANNUAL TAX\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2925\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2926\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2927\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2928\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2929\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2657\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2658\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2659\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2660\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2661\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msize\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'ERROR'"
     ]
    }
   ],
   "source": [
    "#CHECKING THE MEAN ABSOLUTE PERCENTAGE BETWEEN ANNUAL TAX AND Y_RF_PRED\n",
    "\n",
    "check[\"MAPE\"] = 100 * (check[\"ERROR\"]/check[\"ANNUAL TAX\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANNUAL TAX</th>\n",
       "      <th>Y_RF_PRED</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15245</th>\n",
       "      <td>1.284772e+06</td>\n",
       "      <td>1.284772e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21122</th>\n",
       "      <td>6.465618e+05</td>\n",
       "      <td>6.960452e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11605</th>\n",
       "      <td>1.752327e+05</td>\n",
       "      <td>1.722209e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5804</th>\n",
       "      <td>3.009343e+05</td>\n",
       "      <td>2.975266e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26718</th>\n",
       "      <td>4.750249e+05</td>\n",
       "      <td>4.996802e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ANNUAL TAX     Y_RF_PRED\n",
       "15245  1.284772e+06  1.284772e+06\n",
       "21122  6.465618e+05  6.960452e+05\n",
       "11605  1.752327e+05  1.722209e+05\n",
       "5804   3.009343e+05  2.975266e+05\n",
       "26718  4.750249e+05  4.996802e+05"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check[\"ACCURACY\"] = 100 * check[\"MAPE\"].mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "check.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CONCLUSION\n",
    "\n",
    "Random Forest Regression performed better than Linear Regression."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
